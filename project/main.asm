IF1 
	INCLUDE C:\TASM\PROJ\MACROS.MAC
ENDIF

DATA SEGMENT PARA PUBLIC 'DATA'
	SIR_A 			DB 0, MAX_LEN DUP(?)
	SIR_B 			DB 0, MAX_LEN DUP(?)
	LEN_SIR_A		DB 0
	LEN_SIR_B 		DB 0
	FATHER 			DW MAX_LINE_LEN * MAX_LINE_LEN DUP(0)
	DYN 			DB MAX_LINE_LEN * MAX_LINE_LEN DUP(0)
	COM_SUBS_LEN	DB 0
DATA ENDS


CODE SEGMENT PARA PUBLIC 'CODE'
ASSUME CS:CODE, DS:DATA

EXTRN DISPLAY_AX:NEAR
EXTRN AFIS_REZ:NEAR
EXTRN READ_ALL:NEAR

PUBLIC COM_SUBS_LEN
PUBLIC LEN_SIR_A
PUBLIC LEN_SIR_B
PUBLIC SIR_A
PUBLIC SIR_B
PUBLIC FATHER

	MAIN PROC FAR
		DOS_RETURN_INIT	;INITIALIZE DOS RETURN
		
		MOV AX,DATA
		MOV DS,AX		;INITIALIZE DATA SEGMENT
		
		CALL READ_ALL 	;READ SIR_A AND SIR_B
		
		CALL MAKE_DP	;MAKE DYN AND FATHER MATRICES
		
		CALL AFIS_REZ	;SHOW THE RESULT
		
		RET
	MAIN ENDP
	

	
	;STORE THE FATHER CELL IN FATHER MATRIX
	;TOS -> FATHER CELL POSITION
	;BX -> CURENT CELL POSITION
	UPDATE_FATHER MACRO
		POP DX			;DX = THE POSITION OF THE FATHER CELL
		SHL DX,1		;DX = DX*2 BECAUSE FATHER IS MATRIX OF WORDS
		SHL BX,1		;BX = BX*2 BECAUSE FATHER IS MATRIX OF WORDS
		MOV FATHER[BX],DX;FATHER[SI,DI] = POSITION OF THE FATHER CELL	
	ENDM

	
	MAKE_DP PROC NEAR
		PUSHALL
		
		;SI->POSITION IN SIR_A, DI->POSITION IN SIR_B
		MOV SI,1;INITIALIZE SI WITH START OF SIR_A
		
		ADVANCE_A:  MOV DI,1;INITIALIZE DI WITH START OF SIR_B
										
					ADVANCE_B:  MOV AL,SIR_B[DI]
								CMP SIR_A[SI],AL			;CMP SIR_A[SI],SIR_B[DI]
								JNE NOT_EQUAL_A_B
								JMP EQUAL_A_B
								
								NOT_EQUAL_A_B:
								DEC DI
								MAKE_POSITION SI,DI
								MOV DL,DYN[BX]				;DL = DYN[SI,DI-1]
								
								INC DI
								DEC SI
								MAKE_POSITION SI,DI
								INC SI						;SI = INITIAL SI, DI = INITIAL DI
								CMP DL,DYN[BX]				;CMP DYN[SI,DI-1],DYN[SI-1,DI]
								JA SAME_SI_BIGGER
								
								SAME_DI_BIGGER: 					;DYN[SI,DI-1] <= DYN[SI-1,DI]
												PUSH BX 			;WE NEED TO STORE CURRENT BX FOR FATHER MATRIX. BX = [SI-1,DI]
											
												MOV DL,DYN[BX]		;DL = DYN[SI-1,DI]
												MAKE_POSITION SI,DI
												MOV DYN[BX],DL		;DYN[SI,DI] = DYN[SI-1,DI]
												
												UPDATE_FATHER		;FATHER[SI,DI] = [SI-1,DI]
												JMP FINISH_ADVANCE_B
												
												
								
								SAME_SI_BIGGER: 					;DYN[SI,DI-1] > DYN[SI-1,DI]
												MAKE_POSITION SI,DI
												MOV DYN[BX],DL		;DYN[SI,DI] = DYN[SI,DI-1]
												
												DEC DI
												MAKE_POSITION SI,DI	;BX = [SI,DI-1]
												PUSH BX				;FOR UPDATE_FATHER
												INC DI				;DI = INITIAL DI
												MAKE_POSITION SI,DI	;BX = [SI,DI]
												UPDATE_FATHER		;FATHER[SI,DI] = [SI,DI-1]
												JMP FINISH_ADVANCE_B
												
								
								
								
								EQUAL_A_B:  						;SIR_A[SI] == SIR_B[SI]
											DEC SI
											DEC DI					;DYN[SI-1,DI-1]
											MAKE_POSITION SI,DI
											MOV DL,DYN[BX]			;DL = DYN[SI-1,DI-1]
											INC DL					;DL = DYN[SI-1,DI-1] + 1
											PUSH BX					;WE NEED TO STORE CURRENT BX FOR FATHER MATRIX
											
											INC SI
											INC DI					;INITIAL SI AND DI
											MAKE_POSITION SI,DI
											MOV DYN[BX],DL  		;DYN[SI,DI] = DYN[SI-1,DI-1] + 1
											
											UPDATE_FATHER			;FATHER[SI,DI] = [SI-1,DI-1]
											
											JMP FINISH_ADVANCE_B
								
		
								
								FINISH_ADVANCE_B:
								INC DI
								MOV AX,DI
								CMP AL,LEN_SIR_B		;CMP DI,LEN_SIR_B
								JA ADVANCE_B_FINISHED 	;DI > LEN_SIR_B
								JMP ADVANCE_B
								
					ADVANCE_B_FINISHED:

					INC SI
					MOV AX,SI
					CMP AL,LEN_SIR_A	;CMP SI,LEN_SIR_A
					JA LOOPS_FINISHED 	;SI > LEN_SIR_A
					JMP ADVANCE_A
			
		LOOPS_FINISHED:
		
		XOR AH,AH
		MOV AL,LEN_SIR_A
		MOV SI,AX			;SI = LEN_SIR_A
		
		MOV AL,LEN_SIR_B
		MOV DI,AX
		MAKE_POSITION SI,DI	;DI = LEN_SIR_B
		
		MOV DL,DYN[BX]		;BX  = [LEN_SIR_A,LEN_SIR_B]
		MOV COM_SUBS_LEN,DL ;COM_SUBS_LEN = DYN[LEN_SIR_A,LEN_SIR_B]
		
		POPALL
		RET
	MAKE_DP ENDP

CODE ENDS

END MAIN